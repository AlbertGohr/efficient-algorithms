# String filename
filename: HarmonyWalk.mid

# integer seed for random values
seed: 0

# integer midi-value for the instrument
# https://en.wikipedia.org/wiki/General_MIDI
# hint: first instrument (Acoustic Grand Piano) has number 0, second instrument has number 1, and so on.
instrument: 106 # Shamisen

# available scales: Pentatonic, Chromatic, all major scales
# major scale examples: C-major, Gb-major, "D#-major"
scale: "C#-major"

# integer number of notes the track should consist of.
noteCount: 5000

# note pitch is denoted by its midi-value, integer.
# a midi-value ranges from 0-127. middle C (scientific C4) is 60.
# compare https://en.wikipedia.org/wiki/Scientific_pitch_notation#Table_of_note_frequencies
# here the firstPitch must be one the given scale.
# it must  hold: min <= first <= max
minPitch: 48 # C3
maxPitch: 95 # B6
firstPitch: 73 # C#5

# note duration is denoted by the divisor, integer.
# 1 -> full note, 2 -> half note, 4 -> quarter note, and so on.
# here the note duration divisor must be from [1, 2, 4, 8, 16, 32, 64] (power of 2).
# it must hold: 1/min <= 1/first <= 1/max
minDuration: 16
maxDuration: 2
firstDuration: 4

# lambda: positive integer.
# a poisson distribution is used to compute the next pitch.
# https://en.wikipedia.org/wiki/Poisson_distribution
# lambda is a parameter of the distribution.
# increasing lambda increases the average pitch-difference between two succeeding notes.
# lambda values greater than 11 causes the distribution to be inaccurate due to the current implementation.
poissonLambda: 1

# floatingPoint number rho, 0 <= rho <= 1
# probability to change the duration with the next note
durationRho: 0.3